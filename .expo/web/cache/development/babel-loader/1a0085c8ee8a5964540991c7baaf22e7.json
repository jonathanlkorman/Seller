{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Seller\\\\app\\\\screens\\\\ListingsScreen.js\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AppText from \"../components/Text\";\nimport Button from \"../components/Button\";\nimport Card from \"../components/Card\";\nimport colors from \"../config/colors\";\nimport listingsApi from \"../api/listings\";\nimport routes from \"../navigation/routes\";\nimport Screen from \"../components/Screen\";\n\nfunction ListingsScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      listings = _useState2[0],\n      setListings = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  useEffect(function () {\n    loadListings();\n  }, []);\n\n  var loadListings = function loadListings() {\n    var response;\n    return _regeneratorRuntime.async(function loadListings$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(listingsApi.getListings());\n\n          case 3:\n            response = _context.sent;\n            setLoading(false);\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setError(true));\n\n          case 7:\n            setError(false);\n            setListings(response.data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, error && React.createElement(React.Fragment, null, React.createElement(AppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Couldn't retrieve the listings.\"), React.createElement(Button, {\n    title: \"Retry\",\n    onPress: loadListings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  })), React.createElement(ActivityIndicator, {\n    animating: loading,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    data: listings,\n    keyExtractor: function keyExtractor(listing) {\n      return listing.id.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Card, {\n        title: item.title,\n        subTitle: \"$\" + item.price,\n        imageUrl: item.images[0].url,\n        onPress: function onPress() {\n          return navigation.navigate(routes.LISTING_DETAILS, item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  screen: {\n    padding: 20,\n    backgroundColor: colors.light\n  }\n});\nexport default ListingsScreen;","map":{"version":3,"sources":["C:/Users/jonat/Seller/app/screens/ListingsScreen.js"],"names":["React","useState","useEffect","AppText","Button","Card","colors","listingsApi","routes","Screen","ListingsScreen","navigation","listings","setListings","error","setError","loading","setLoading","loadListings","getListings","response","ok","data","styles","screen","listing","id","toString","item","title","price","images","url","navigate","LISTING_DETAILS","StyleSheet","create","padding","backgroundColor","light"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { ActivityIndicator, FlatList, StyleSheet } from \"react-native\";\n\nimport AppText from \"../components/Text\";\nimport Button from '../components/Button';\nimport Card from \"../components/Card\";\nimport colors from \"../config/colors\";\nimport listingsApi from \"../api/listings\";\nimport routes from '../navigation/routes';\nimport Screen from \"../components/Screen\";\n\nfunction ListingsScreen({ navigation }) {\n\n  const [listings, setListings] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadListings();\n  },[]);\n  \n  const loadListings = async () => {\n    setLoading(true);\n    const response = await listingsApi.getListings();\n    setLoading(false);\n\n    if (!response.ok) return setError(true);\n\n    setError(false);\n    setListings(response.data);\n    \n  }\n\n  return (\n    <Screen style={styles.screen}>\n      {error && (\n        <>\n          <AppText>Couldn't retrieve the listings.</AppText>\n          <Button title=\"Retry\" onPress={loadListings} />\n        </>\n      )}\n      <ActivityIndicator animating={loading} size='large'/>\n      <FlatList\n        data={listings}\n        keyExtractor={(listing) => listing.id.toString()}\n        renderItem={({ item }) => (\n          <Card\n            title={item.title}\n            subTitle={\"$\" + item.price}\n            imageUrl={item.images[0].url}\n            onPress={ () => navigation.navigate(routes.LISTING_DETAILS, item)}\n          />\n        )}\n      />\n    </Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    padding: 20,\n    backgroundColor: colors.light,\n  },\n});\n\nexport default ListingsScreen;\n"]},"metadata":{},"sourceType":"module"}