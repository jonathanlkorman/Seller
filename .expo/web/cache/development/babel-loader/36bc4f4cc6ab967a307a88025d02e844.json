{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Seller\\\\app\\\\components\\\\ImageInput.js\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as ImagePicker from 'expo-image-picker';\nimport colors from \"../config/colors\";\n\nfunction ImageInput(_ref) {\n  var imageUri = _ref.imageUri,\n      onChangeImage = _ref.onChangeImage;\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var requestPermission = function requestPermission() {\n    var _await$ImagePicker$re, granted;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            _await$ImagePicker$re = _context.sent;\n            granted = _await$ImagePicker$re.granted;\n            if (!granted) alert('You need to enable permission to access the library.');\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePress = function handlePress() {\n    if (!imageUri) selectedImage();else Alert.alert('Delete', 'Are you sure you want to delete this image?', [{\n      text: 'Yes',\n      onPress: function onPress() {\n        return onChangeImage(null);\n      }\n    }, {\n      text: 'No'\n    }]);\n  };\n\n  var selectedImage = function selectedImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectedImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              quality: 0.5\n            }));\n\n          case 3:\n            result = _context2.sent;\n            if (!result.cancelled) onChangeImage(result.uri);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('Error reading an image', _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: handlePress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, !imageUri && React.createElement(MaterialCommunityIcons, {\n    name: \"camera\",\n    size: 40,\n    color: colors.medium,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), imageUri && React.createElement(Image, {\n    source: {\n      uri: imageUri\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 26\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: colors.light,\n    borderRadius: 15,\n    height: 100,\n    justifyContent: 'center',\n    overflow: 'hidden',\n    width: 100\n  },\n  image: {\n    height: '100%',\n    width: '100%'\n  }\n});\nexport default ImageInput;","map":{"version":3,"sources":["C:/Users/jonat/Seller/app/components/ImageInput.js"],"names":["React","useEffect","MaterialCommunityIcons","ImagePicker","colors","ImageInput","imageUri","onChangeImage","requestPermission","requestMediaLibraryPermissionsAsync","granted","alert","handlePress","selectedImage","Alert","text","onPress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","quality","result","cancelled","uri","console","log","styles","container","medium","image","StyleSheet","create","alignItems","backgroundColor","light","borderRadius","height","justifyContent","overflow","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAEA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AAEA,OAAOC,MAAP;;AAEA,SAASC,UAAT,OAAiD;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,aAAiB,QAAjBA,aAAiB;AAC7CN,EAAAA,SAAS,CAAE,YAAM;AACbO,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEL,WAAW,CAACM,mCAAZ,EADF;;AAAA;AAAA;AACfC,YAAAA,OADe,yBACfA,OADe;AAEtB,gBAAG,CAACA,OAAJ,EACEC,KAAK,CAAC,sDAAD,CAAL;;AAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAMA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAG,CAACN,QAAJ,EAAcO,aAAa,GAA3B,KACKC,KAAK,CAACH,KAAN,CAAY,QAAZ,EAAsB,6CAAtB,EAAqE,CACtE;AAAEI,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,OAAO,EAAE;AAAA,eAAMT,aAAa,CAAC,IAAD,CAAnB;AAAA;AAAxB,KADsE,EAEtE;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAFsE,CAArE;AAIR,GAND;;AAQA,MAAMF,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEKV,WAAW,CAACc,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEf,WAAW,CAACgB,gBAAZ,CAA6BC,MADY;AAErDC,cAAAA,OAAO,EAAE;AAF4C,aAApC,CAFL;;AAAA;AAEVC,YAAAA,MAFU;AAMhB,gBAAG,CAACA,MAAM,CAACC,SAAX,EACEhB,aAAa,CAACe,MAAM,CAACE,GAAR,CAAb;AAPc;AAAA;;AAAA;AAAA;AAAA;AAShBC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AATgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAaF,SACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEd,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEe,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACtB,QAAD,IACD,oBAAC,sBAAD;AAAwB,IAAA,IAAI,EAAC,QAA7B;AAAsC,IAAA,IAAI,EAAE,EAA5C;AAAgD,IAAA,KAAK,EAAEF,MAAM,CAACyB,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAIKvB,QAAQ,IAAI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEkB,MAAAA,GAAG,EAAElB;AAAP,KAAf;AAAkC,IAAA,KAAK,EAAEqB,MAAM,CAACG,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJjB,CADJ,CADF;AAUD;;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,UAAU,EAAE,QADL;AAEPC,IAAAA,eAAe,EAAE9B,MAAM,CAAC+B,KAFjB;AAGPC,IAAAA,YAAY,EAAE,EAHP;AAIPC,IAAAA,MAAM,EAAE,GAJD;AAKPC,IAAAA,cAAc,EAAE,QALT;AAMPC,IAAAA,QAAQ,EAAE,QANH;AAOPC,IAAAA,KAAK,EAAE;AAPA,GADoB;AAU/BV,EAAAA,KAAK,EAAE;AACHO,IAAAA,MAAM,EAAE,MADL;AAEHG,IAAAA,KAAK,EAAE;AAFJ;AAVwB,CAAlB,CAAf;AAgBA,eAAenC,UAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { View, StyleSheet, Image, TouchableWithoutFeedback, Alert } from 'react-native';\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nimport colors from '../config/colors';\r\n\r\nfunction ImageInput({ imageUri, onChangeImage }) {\r\n    useEffect( () => {\r\n        requestPermission();\r\n    }, [])\r\n\r\n    const requestPermission = async () => {\r\n        const {granted} = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if(!granted)\r\n          alert('You need to enable permission to access the library.');\r\n      }\r\n\r\n    const handlePress = () => {\r\n        if(!imageUri) selectedImage();\r\n        else Alert.alert('Delete', 'Are you sure you want to delete this image?', [\r\n            { text: 'Yes', onPress: () => onChangeImage(null) },\r\n            { text: 'No' }\r\n        ])\r\n    }\r\n\r\n    const selectedImage = async () => {\r\n        try { \r\n          const result = await ImagePicker.launchImageLibraryAsync({\r\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n              quality: 0.5\r\n          });\r\n          if(!result.cancelled)\r\n            onChangeImage(result.uri)\r\n        } catch (error) {\r\n          console.log('Error reading an image', error);\r\n        }\r\n      }\r\n\r\n  return (\r\n    <TouchableWithoutFeedback onPress={handlePress}>\r\n        <View style={styles.container}>\r\n            {!imageUri && (\r\n            <MaterialCommunityIcons name='camera' size={40} color={colors.medium} />\r\n            )}\r\n            {imageUri && <Image source={{ uri: imageUri }} style={styles.image} />}\r\n        </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n      alignItems: 'center',\r\n      backgroundColor: colors.light,\r\n      borderRadius: 15,\r\n      height: 100,\r\n      justifyContent: 'center',\r\n      overflow: 'hidden',\r\n      width: 100,\r\n  },\r\n  image: {\r\n      height: '100%',\r\n      width: '100%',\r\n  },\r\n});\r\n\r\nexport default ImageInput;"]},"metadata":{},"sourceType":"module"}